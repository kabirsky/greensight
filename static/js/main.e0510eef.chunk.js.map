{"version":3,"sources":["components/Delivery.js","components/Pickup.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Delivery","useState","disabled","setDisabled","className","placeholder","mask","rows","type","onClick","event","setTimeout","alert","Pickup","Home","deliveryClass","setDeliveryClass","pickupClass","setPickupClass","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wSAyFeA,MArFf,WACE,IADkB,EAqBcC,oBAAS,GArBvB,mBAqBXC,EArBW,KAqBDC,EArBC,KA6BlB,OACE,oCACE,8BACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,qBACb,2BAAOA,UAAU,SAAjB,qBAEE,2BAAOA,UAAU,QAAQC,YAAY,kGAIzC,yBAAKD,UAAU,uBACb,2BAAOA,UAAU,SAAjB,6CAEE,kBAAC,IAAD,CACEA,UAAU,QACVE,KA7CH,CACX,IACA,IACA,IACA,QACA,QACA,QACA,IACA,IACA,QACA,QACA,QACA,IACA,QACA,QACA,IACA,QACA,SA6BcD,YAAY,wBAKlB,yBAAKD,UAAU,yBACb,2BAAOA,UAAU,wBAAjB,kFAEE,2BACEA,UAAU,uBACVC,YAAY,yFAKlB,yBAAKD,UAAU,yBACb,2BAAOA,UAAU,wBAAjB,qEAEE,8BAAUA,UAAU,uBAAuBG,KAAM,OAIvD,yBAAKH,UAAU,aACb,4BACEA,UAAU,gBACVI,KAAK,SACLC,QAlDc,SAACC,GACzBP,GAAY,GACZQ,YAAW,WAAOC,MAAM,oFAAmBT,GAAY,KAAU,MAiDvDD,SAAUA,GAJZ,wFClEGW,MANf,WACE,OAAO,sC,MC2CMC,MAzCf,WAAiB,IAAD,EAC4Bb,mBAAS,wBADrC,mBACPc,EADO,KACQC,EADR,OAEwBf,mBAAS,iBAFjC,mBAEPgB,EAFO,KAEMC,EAFN,KAkBd,OACE,yBAAKd,UAAU,QACb,yBAAKA,UAAU,aACb,sKACA,yBAAKA,UAAU,YACb,0BAAMA,UAAWW,EAAeN,QAnBZ,WACJ,kBAAlBM,IACFC,EAAiB,wBACjBE,EAAe,oBAgBX,oDAGA,0BAAMd,UAAWa,EAAaR,QAfZ,WACJ,kBAAhBQ,IACFD,EAAiB,iBACjBE,EAAe,2BAYX,2DAIF,yBAAKd,UAAU,UACM,yBAAlBW,EACC,kBAAC,EAAD,MAEA,kBAAC,EAAD,U,MC3BGI,MARf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,QCKAgB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDcnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,cAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,cAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCpC/BE,K","file":"static/js/main.e0510eef.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport MaskedInput from \"react-text-mask\";\r\nimport \"./Delivery.css\";\r\n\r\nfunction Delivery() {\r\n  const mask = [\r\n    \"+\",\r\n    \"7\",\r\n    \"(\",\r\n    /[0-9]/,\r\n    /[0-9]/,\r\n    /[0-9]/,\r\n    \")\",\r\n    \" \",\r\n    /[0-9]/,\r\n    /[0-9]/,\r\n    /[0-9]/,\r\n    \"-\",\r\n    /[0-9]/,\r\n    /[0-9]/,\r\n    \"-\",\r\n    /[0-9]/,\r\n    /[0-9]/,\r\n  ];\r\n\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  const handleClickSubmit = (event) => {\r\n    setDisabled(true);\r\n    setTimeout(() => {alert(\"Заказ оформлен!\");setDisabled(false);}, 1000);\r\n    \r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form>\r\n        <div className=\"container\">\r\n          <div className=\"form\">\r\n            <div className=\"form__element fio\">\r\n              <label className=\"label\">\r\n                ФИО\r\n                <input className=\"input\" placeholder=\"Только кириллица\" />\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"form__element phone\">\r\n              <label className=\"label\">\r\n                Телефон\r\n                <MaskedInput\r\n                  className=\"input\"\r\n                  mask={mask}\r\n                  placeholder=\"+7(___) ___-__-__\"\r\n                />\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"form__element address\">\r\n              <label className=\"label address__label\">\r\n                Адрес доставки\r\n                <input\r\n                  className=\"input address__input\"\r\n                  placeholder=\"Город, улица, дом\"\r\n                />\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"form__element comment\">\r\n              <label className=\"label comment__label\">\r\n                Комментарий\r\n                <textarea className=\"input comment__input\" rows={4} />\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <div className=\"form__btn\">\r\n            <button\r\n              className=\"delivery__btn\"\r\n              type=\"button\"\r\n              onClick={handleClickSubmit}\r\n              disabled={disabled}\r\n            >\r\n              Оформить заказ\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Delivery;\r\n","import React from \"react\";\r\n\r\nfunction Pickup() {\r\n  return <>\r\n\r\n  </>;\r\n}\r\n\r\nexport default Pickup;\r\n","import React, { useState } from \"react\";\r\nimport Delivery from './Delivery';\r\nimport Pickup from './Pickup'\r\nimport \"./Home.css\";\r\n\r\nfunction Home() {\r\n  const [deliveryClass, setDeliveryClass] = useState(\"selector__btn active\");\r\n  const [pickupClass, setPickupClass] = useState(\"selector__btn\");\r\n\r\n  const handleClickDelivery = () => {\r\n    if (deliveryClass === \"selector__btn\") {\r\n      setDeliveryClass(\"selector__btn active\");\r\n      setPickupClass(\"selector__btn\");\r\n    }\r\n  };\r\n\r\n  const handleClickPickup = () => {\r\n    if (pickupClass === \"selector__btn\") {\r\n      setDeliveryClass(\"selector__btn\");\r\n      setPickupClass(\"selector__btn active\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Home\">\r\n      <div className=\"container\">\r\n        <h1>Выберите способ доставки</h1>\r\n        <div className=\"selector\">\r\n          <span className={deliveryClass} onClick={handleClickDelivery}>\r\n            Доставка\r\n          </span>\r\n          <span className={pickupClass} onClick={handleClickPickup}>\r\n            Самовывоз\r\n          </span>\r\n        </div>\r\n        <div className=\"applet\">\r\n          {deliveryClass === \"selector__btn active\" ? (\r\n            <Delivery />\r\n          ) : (\r\n            <Pickup />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","import React from \"react\";\nimport Home from \"./components/Home\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}